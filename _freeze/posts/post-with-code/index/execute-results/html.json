{
  "hash": "91204a31c65f445402988576a8b73f76",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"read any data\"\nauthor: \"LogitLegendary\"\ndate: \"2025-02-18\"\ncategories: [code] \n---\n\n\n\n![](readanydata.png)\n\n## 在R语言中读取各种格式的数据\n\n适用于 SAS SPSS R Excel格式的数据\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_any_file <- function(file, sheet = NULL, encoding = \"UTF-8\") {\n  # 获取文件扩展名，忽略大小写\n  ext <- tolower(tools::file_ext(file))\n  \n  if (ext %in% c(\"csv\")) {\n    # CSV 文件：使用 data.table::fread 并指定编码\n    dt <- data.table::fread(file, encoding = encoding)\n    \n  } else if (ext %in% c(\"xlsx\", \"xls\")) {\n    # Excel 文件：使用 readxl::read_excel，支持选择 sheet\n    if (!requireNamespace(\"readxl\", quietly = TRUE)) {\n      stop(\"请先安装 readxl 包：install.packages('readxl')\")\n    }\n    dt <- readxl::read_excel(file, sheet = sheet)\n    dt <- data.table::as.data.table(dt)\n    \n  } else if (ext == \"sav\") {\n    # SPSS 文件：.sav\n    if (!requireNamespace(\"haven\", quietly = TRUE)) {\n      stop(\"请先安装 haven 包：install.packages('haven')\")\n    }\n    dt <- haven::read_sav(file)\n    dt <- data.table::as.data.table(dt)\n    \n  } else if (ext == \"dta\") {\n    # Stata 文件：.dta\n    if (!requireNamespace(\"haven\", quietly = TRUE)) {\n      stop(\"请先安装 haven 包：install.packages('haven')\")\n    }\n    dt <- haven::read_dta(file)\n    dt <- data.table::as.data.table(dt)\n    \n  } else if (ext == \"sas7bdat\") {\n    # SAS 文件：.sas7bdat\n    if (!requireNamespace(\"haven\", quietly = TRUE)) {\n      stop(\"请先安装 haven 包：install.packages('haven')\")\n    }\n    dt <- haven::read_sas(file)\n    dt <- data.table::as.data.table(dt)\n    \n  } else if (ext == \"rdata\") {\n    # RData 文件：直接 load 文件，假定文件中有一个名为 dt 的对象\n    dt <- load(file) |> data.table::as.data.table()\n    \n  } else {\n    stop(\"不支持的文件格式\")\n  }\n  \n  return(dt)\n}\n\n# dat <- read_any_file (\"C:/Users/hcy29/Desktop/read_data/SPSS.sav\")\n```\n:::\n\n\n\n- 运行函数以后，只需要修改路径即可 读取数据进R\n\n- 也可以自己拆开函数 根据对应的数据格式 进行读取\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}